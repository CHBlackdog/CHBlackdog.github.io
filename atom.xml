<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHBlackdog-翦</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chblackdog.github.io/"/>
  <updated>2017-06-05T06:53:12.000Z</updated>
  <id>https://chblackdog.github.io/</id>
  
  <author>
    <name>CHBlackdog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ActiveMQ权限验证以及持久化topic</title>
    <link href="https://chblackdog.github.io/2017/06/05/activeMQ-topic-auth-persistence/"/>
    <id>https://chblackdog.github.io/2017/06/05/activeMQ-topic-auth-persistence/</id>
    <published>2017-06-05T02:24:02.000Z</published>
    <updated>2017-06-05T06:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>   ActiveMQ默认不需要进行权限验证，任何人只要知道地址就可以接收或发送消息，这显然是不安全的。</p>
<h2 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h2><h3 id="网页控制台的验证"><a href="#网页控制台的验证" class="headerlink" title="网页控制台的验证"></a>网页控制台的验证</h3><p>可以在jetty-realm.properties文件中修改ActivityMQ的管理页面的访问用户名及密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># username: password [,rolename ...]</div><div class="line">admin: 123456, admin</div><div class="line">user: user, user</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>角色可以在jetty.xml中添加，具体不赘述。</p>
<h3 id="Borker连接安全性"><a href="#Borker连接安全性" class="headerlink" title="Borker连接安全性"></a>Borker连接安全性</h3><h4 id="简单的账号密码实现"><a href="#简单的账号密码实现" class="headerlink" title="简单的账号密码实现"></a>简单的账号密码实现</h4><p>第一种办法设置简单的用户名与密码来拦截所有的请求，无法控制具体的主题队列</p>
<ol>
<li>在credentials.properties文件中设置用户名和密码。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">activemq.username=system</div><div class="line">activemq.password=manager</div><div class="line">user.username=shuluan</div><div class="line">user.password=123456</div><div class="line">guest.password=password</div></pre></td></tr></table></figure>
</li>
</ol>
<p>通过credentials-enc.properties可以对用户名密码进行加密，参考官方文档地址：<a href="http://activemq.apache.org/encrypted-passwords.html" target="_blank" rel="external">http://activemq.apache.org/encrypted-passwords.html</a></p>
<ol>
<li>在activemq.xml文件systemUsage标签之前加上<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;plugins&gt;</div><div class="line">　　&lt;simpleAuthenticationPlugin&gt;</div><div class="line">　　　　&lt;users&gt;</div><div class="line">	　　&lt;authenticationUser username=&quot;$&#123;activemq.username&#125;&quot; password=&quot;$&#123;activemq.password&#125;&quot; groups=&quot;users,admins&quot;/&gt;</div><div class="line">	　　&lt;authenticationUser username=&quot;$&#123;user.username&#125;&quot; password=&quot;$&#123;user.password&#125;&quot; groups=&quot;users&quot;/&gt;</div><div class="line">	　　&lt;authenticationUser username=&quot;guest&quot; password=&quot;$&#123;guest.password&#125;&quot; groups=&quot;guests&quot;/&gt;</div><div class="line">　　　　&lt;/users&gt;</div><div class="line">　　&lt;/simpleAuthenticationPlugin&gt;</div><div class="line">&lt;/plugins&gt; </div><div class="line">&lt;!-- 加载属性配置文件 --&gt;</div><div class="line">&lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</div><div class="line">	 &lt;property name=&quot;locations&quot;&gt;</div><div class="line">		&lt;value&gt;file:///$&#123;activemq.base&#125;/conf/credentials.properties&lt;/value&gt;</div><div class="line">	 &lt;/property&gt;      </div><div class="line">  &lt;/bean&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="队列-主题级别的权限控制"><a href="#队列-主题级别的权限控制" class="headerlink" title="队列/主题级别的权限控制"></a><strong>队列/主题级别的权限控制</strong></h4><ol>
<li>在activemq.xml文件systemUsage标签之前加上<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;plugins&gt;</div><div class="line">	&lt;!--</div><div class="line">  	use JAAS to authenticate using the login.config file on the classpath to configure JAAS</div><div class="line">	--&gt;</div><div class="line">	&lt;jaasAuthenticationPlugin configuration=&quot;activemq&quot;/&gt;</div><div class="line">	</div><div class="line">	&lt;!-- lets configure a destination based authorization mechanism --&gt;</div><div class="line">	&lt;authorizationPlugin&gt;</div><div class="line">		&lt;map&gt;</div><div class="line">			&lt;authorizationMap&gt;</div><div class="line">				&lt;authorizationEntries&gt;</div><div class="line">					&lt;authorizationEntry queue=&quot;&gt;&quot; read=&quot;admins&quot; write=&quot;admins&quot; admin=&quot;admins&quot;/&gt;</div><div class="line">					&lt;authorizationEntry queue=&quot;QUEUE.LOCAL_SERVICE.&gt;&quot; read=&quot;local-service-users&quot; write=&quot;local-service-users&quot; admin=&quot;local-service-users&quot;/&gt;</div><div class="line">					&lt;authorizationEntry topic=&quot;&gt;&quot; read=&quot;admins&quot; write=&quot;admins&quot; admin=&quot;admins&quot;/&gt;</div><div class="line">					&lt;authorizationEntry topic=&quot;TOPIC.LOCAL_SERVICE.&gt;&quot; read=&quot;local-service-users&quot; write=&quot;local-service-users&quot; admin=&quot;local-service-users&quot;/&gt;</div><div class="line">					&lt;authorizationEntry topic=&quot;ActiveMQ.Advisory.&gt;&quot; read=&quot;admins,local-service-users&quot; write=&quot;admins,local-service-users&quot; admin=&quot;admins,local-service-users&quot;/&gt;</div><div class="line">				&lt;/authorizationEntries&gt;</div><div class="line">&lt;!--</div><div class="line"> let&apos;s assign roles to temporary destinations. comment this entry if we don&apos;t want any roles assigned to temp destinations</div><div class="line">--&gt;</div><div class="line">				&lt;tempDestinationAuthorizationEntry&gt;</div><div class="line">					&lt;tempDestinationAuthorizationEntry read=&quot;tempDestinationAdmins&quot; write=&quot;tempDestinationAdmins&quot; admin=&quot;tempDestinationAdmins&quot;/&gt;</div><div class="line">				&lt;/tempDestinationAuthorizationEntry&gt;</div><div class="line">				&lt;/authorizationMap&gt;</div><div class="line">			&lt;/map&gt;</div><div class="line">		&lt;/authorizationPlugin&gt;</div><div class="line">&lt;/plugins&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>关键看这句：<br>    <authorizationentry topic="TOPIC.LOCAL_SERVICE.>" read="local-service-users" write="local-service-users" admin="local-service-users"><br>topic=”TOPIC.LOCAL_SERVICE.&gt; 表示所有以TOPIC.LOCAL_SERVICE.开头的topic适用此规则，后面是三种权限及对应的权限组：read,write,admin</authorizationentry></p>
<ol>
<li><p>权限组在groups.properties文件中设置：用户组=用户1,用户2…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">admins=admin</div><div class="line">local-service-users=test</div></pre></td></tr></table></figure>
</li>
<li><p>在user.properties中设置用户名和密码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">admin=admin</div><div class="line">test=123456</div></pre></td></tr></table></figure>
</li>
<li><p>在login.config文件中指定user.properties及groups.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">activemq &#123;</div><div class="line">    org.apache.activemq.jaas.PropertiesLoginModule required</div><div class="line">        org.apache.activemq.jaas.properties.user=&quot;users.properties&quot;</div><div class="line">        org.apache.activemq.jaas.properties.group=&quot;groups.properties&quot;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>最后在spring中设置用户名密码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.activemq.user=test</div><div class="line">spring.activemq.password=123456</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>注意在配置过程中如果启动ActiveMQ出现：activemq javax.security.auth.login.LoginException: 没有为 activemq-domain 配置LoginModules。<br>那是因为activemq.xml文件中<jaasauthenticationplugin configuration="activemq"><br>configuration指定的名字(activemq)与conf/login.config文件中的名称不一致造成的。</jaasauthenticationplugin></p>
<h2 id="spring-boot中topic持久化订阅用法"><a href="#spring-boot中topic持久化订阅用法" class="headerlink" title="spring-boot中topic持久化订阅用法"></a>spring-boot中topic持久化订阅用法</h2><p>spring-boot中利用@JmsListener<br>监听消息，queue默认设置是持久化的，topic的持久化订阅需要设置：</p>
<ol>
<li><p>手动设置jmsListenerContainerFactory</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">ConnectionFactory connectionFactory;<span class="comment">//载入系统默认ConnectionFactory</span></div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> DefaultJmsListenerContainerFactory <span class="title">jmsListenerContainerFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">    DefaultJmsListenerContainerFactory factory = <span class="keyword">new</span> DefaultJmsListenerContainerFactory();</div><div class="line">    factory.setConnectionFactory(connectionFactory);</div><div class="line">    factory.setSubscriptionDurable(<span class="keyword">true</span>);<span class="comment">//设置持久化订阅</span></div><div class="line">    factory.setClientId(<span class="string">"Client-A"</span>);<span class="comment">//必须设置client-id</span></div><div class="line">    factory.setPubSubDomain(<span class="keyword">true</span>);<span class="comment">//设置模式为发布-订阅模式</span></div><div class="line">    <span class="keyword">return</span> factory;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>设置监听</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">*/**</div><div class="line"> * **@param** cfgMap</div><div class="line"> */*</div><div class="line">@JmsListener(containerFactory = &quot;jmsListenerContainerFactory&quot;,subscription = &quot;topic_1&quot;,destination = &quot;TOPIC.LOCAL_SERVICE.CONFIG&quot;)</div><div class="line">public void receiveData(Map&lt;String,String&gt; data)&#123;</div><div class="line">    System.out.println(&quot;LocalServiceCfg received:&quot; + data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>subscription必须设置，不同的subscription可以订阅不同的topic消息</p>
<h3 id="另外如果要发送或接受特定类型的数据，必须设置"><a href="#另外如果要发送或接受特定类型的数据，必须设置" class="headerlink" title="另外如果要发送或接受特定类型的数据，必须设置"></a>另外如果要发送或接受特定类型的数据，必须设置</h3><pre><code>spring.activemq.packages.trusted=java.util,java.lang 
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   ActiveMQ默认不需要进行权限验证，任何人只要知道地址就可以接收或发送消息，这显然是不安全的。&lt;/p&gt;
&lt;h2 id=&quot;权限验证&quot;&gt;&lt;a href=&quot;#权限验证&quot; class=&quot;headerlink&quot; title=&quot;权限验证&quot;&gt;&lt;/a&gt;权限验证&lt;/h2&gt;&lt;h3 id=&quot;网页控制台的验证&quot;&gt;&lt;a href=&quot;#网页控制台的验证&quot; class=&quot;headerlink&quot; title=&quot;网页控制台的验证&quot;&gt;&lt;/a&gt;网页控制台的验证&lt;/h3&gt;&lt;p&gt;可以在jetty-realm.properties文件中修改ActivityMQ的管理页面的访问用户名及密码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# username: password [,rolename ...]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;admin: 123456, admin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;user: user, user&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ActiveMQ" scheme="https://chblackdog.github.io/categories/ActiveMQ/"/>
    
    
      <category term="后台" scheme="https://chblackdog.github.io/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="ActiveMQ" scheme="https://chblackdog.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>springboot常用注解</title>
    <link href="https://chblackdog.github.io/2017/05/19/springboot-annotation/"/>
    <id>https://chblackdog.github.io/2017/05/19/springboot-annotation/</id>
    <published>2017-05-19T06:55:47.000Z</published>
    <updated>2017-06-05T06:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>@Component: 把普通pojo实例化到spring容器中，相当于配置文件中的<bean id="" class=""></bean></p>
</li>
<li><p>@Repository：数据访问层，同@Component</p>
</li>
<li><p>@Controller:表示这是一个Controller，并注册到spring中</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>@ConfigurationProperties: 配置文件（yml）通过前缀映射到类。如：(prefix = “girl”)</p>
</li>
<li><p>@ResponseBody:表示直接返回数据而不是页面</p>
</li>
<li><p>@RestController:相当于@Controller+@ResponseBody</p>
</li>
<li><p>@RequestMapping:接收http请求</p>
</li>
<li><p>@Autowired:自动依赖注入</p>
</li>
<li><p>@Qualifier:配合@Autowired，如果有多个匹配者，需使用它来进行区分</p>
</li>
<li><p>@Value:自动装配基本数据类型，@Value(“${a}”)</p>
</li>
<li><p>@PathVariable: 获取url中的数据如：/{path} 可以通过@PathVariable(“path”)获取</p>
</li>
<li><p>@RequestParam: 获取请求参数的值。如：url?value=aa 可以通过@RequestParam(“value”)获取value值.并可以设置默认值：@RequestParam(value=”value”,required = false,defaultValue = “0”)</p>
</li>
<li><p>@GetMapping: 组合注解,相当于@RequestMapping(method=RequestMethod.GET)</p>
</li>
<li><p>@Configuration: 相当于beans，方法上注解@Bean相当于XML中配置bean,可以使用如下方法获取bean</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ApplicationContext annotationContext = new AnnotationConfigApplicationContext(&quot;SpringStudy&quot;);  </div><div class="line">Counter c = annotationContext.getBean(&quot;counter&quot;, Counter.class);// 创建bean的引用对象</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><strong>数据库相关：</strong></p>
<ul>
<li>@Entity：标记数据库关联表</li>
<li>@Table：设置实际的表名</li>
<li>@Column：设置实际的列名，设置属性等<ul>
<li>columnDefinition设置字段类型</li>
<li>precision（数值总长度）和scale（小数点所占位数）属性只在BigDecimal类型中有效</li>
</ul>
</li>
<li>@Id:标记主键</li>
<li>@GeneratedValue:主键生成规则<br>  a，TABLE：使用一个特定的数据库表格来保存主键。 与@TableGenerator配合（不常用）<br>  b，SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。与    @SequenceGenerator配合（不常用）<br>  c，IDENTITY：主键由数据库自动生成（主要是自动增长型）<br>  d，AUTO：主键由程序控制。 </li>
<li>@Temporal:定义数据库中Date类型的精度：DATE,TIME,TIMESTAMP</li>
<li>@Transient:忽略该属性，不做为列</li>
<li>映射关系：</li>
</ul>
<ul>
<li>@OneToOne:一对一的映射关系</li>
<li>@ManyToMany:多对多的映射关系</li>
<li>@ManyToOne:多对一的映射关系，多的一方为关系维护端</li>
<li>@OneToMany:一对多的映射关系，多的一方为关系维护端<ul>
<li>CascadeType属性：<ul>
<li>CascadeType.PERSIST:级联新增<ul>
<li>CascadeType.MERGE:级联更新</li>
<li>CascadeType.REMOVE:级联删除</li>
<li>CascadeType.ALL:以上所有</li>
</ul>
</li>
</ul>
</li>
<li>mappedBy: 指定关系维护方，与JoinColumn/JoinTable在互斥方 </li>
</ul>
</li>
<li>@JoinTable: 多对多关系时设置中间表</li>
<li>@JoinColumn: </li>
<li>@PrimaryKeyJoinColumn </li>
</ul>
<ul>
<li>@EnableScheduling启动任务，启动后@Scheduled注解生效</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;@Component: 把普通pojo实例化到spring容器中，相当于配置文件中的&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;&lt;/bean&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@Repository：数据访问层，同@Component&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@Controller:表示这是一个Controller，并注册到spring中&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://chblackdog.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://chblackdog.github.io/tags/SpringBoot/"/>
    
      <category term="注解" scheme="https://chblackdog.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="后台" scheme="https://chblackdog.github.io/tags/%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>maven常用命令解释</title>
    <link href="https://chblackdog.github.io/2017/05/17/maven-command/"/>
    <id>https://chblackdog.github.io/2017/05/17/maven-command/</id>
    <published>2017-05-17T07:37:00.000Z</published>
    <updated>2017-05-17T07:52:20.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mvn -v #查看maven版本</div><div class="line">mvn compile #编译</div><div class="line">mvn test #测试</div><div class="line">mvn package #打包生成目标jar或其他</div><div class="line">mvn clean #删除target文件夹</div><div class="line">mvn install #安装jar包到本地仓库</div><div class="line"></div><div class="line">mvn archetype:generate -DgroupId=com.chblackdog.example </div><div class="line">						-DartifactId=项目名-模块名</div><div class="line">						-Dversion=版本号</div><div class="line">						-Dpackage=代码所在包名      #生成标准maven项目</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="Maven" scheme="https://chblackdog.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://chblackdog.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>maven用法-pom文件下各个元素的解释</title>
    <link href="https://chblackdog.github.io/2017/05/17/maven-elements/"/>
    <id>https://chblackdog.github.io/2017/05/17/maven-elements/</id>
    <published>2017-05-17T03:11:36.000Z</published>
    <updated>2017-05-17T08:44:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文只列出自己理解的pom文件中常用的一些标签的含义，Maven的内部运行原理可以参考这篇文章：<a href="http://www.jianshu.com/p/0fb5e3fb704d" target="_blank" rel="external"><strong><strong>maven内部运行原理解析(一)</strong></strong></a>。<br>根据Mavan官网的<a href="http://maven.apache.org/pom.html#Quick_Overview" target="_blank" rel="external">POM Reference</a>,Pom文件基本上可以有以下这些元素：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</div><div class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line"> xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</div><div class="line">                     http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line"> &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"> </div><div class="line"> &lt;!-- The Basics --&gt;</div><div class="line"> &lt;groupId&gt;...&lt;/groupId&gt;</div><div class="line"> &lt;artifactId&gt;...&lt;/artifactId&gt;</div><div class="line"> &lt;version&gt;...&lt;/version&gt;</div><div class="line"> &lt;packaging&gt;...&lt;/packaging&gt;</div><div class="line"> &lt;dependencies&gt;...&lt;/dependencies&gt;</div><div class="line"> &lt;parent&gt;...&lt;/parent&gt;</div><div class="line"> &lt;dependencyManagement&gt;...&lt;/dependencyManagement&gt;</div><div class="line"> &lt;modules&gt;...&lt;/modules&gt;</div><div class="line"> &lt;properties&gt;...&lt;/properties&gt;</div><div class="line"> </div><div class="line"> &lt;!-- Build Settings --&gt;</div><div class="line"> &lt;build&gt;...&lt;/build&gt;</div><div class="line"> &lt;reporting&gt;...&lt;/reporting&gt;</div><div class="line"> </div><div class="line"> &lt;!-- More Project Information --&gt;</div><div class="line"> &lt;name&gt;...&lt;/name&gt;</div><div class="line"> &lt;description&gt;...&lt;/description&gt;</div><div class="line"> &lt;url&gt;...&lt;/url&gt;</div><div class="line"> &lt;inceptionYear&gt;...&lt;/inceptionYear&gt;</div><div class="line"> &lt;licenses&gt;...&lt;/licenses&gt;</div><div class="line"> &lt;organization&gt;...&lt;/organization&gt;</div><div class="line"> &lt;developers&gt;...&lt;/developers&gt;</div><div class="line"> &lt;contributors&gt;...&lt;/contributors&gt;</div><div class="line"> </div><div class="line"> &lt;!-- Environment Settings --&gt;</div><div class="line"> &lt;issueManagement&gt;...&lt;/issueManagement&gt;</div><div class="line"> &lt;ciManagement&gt;...&lt;/ciManagement&gt;</div><div class="line"> &lt;mailingLists&gt;...&lt;/mailingLists&gt;</div><div class="line"> &lt;scm&gt;...&lt;/scm&gt;</div><div class="line"> &lt;prerequisites&gt;...&lt;/prerequisites&gt;</div><div class="line"> &lt;repositories&gt;...&lt;/repositories&gt;</div><div class="line"> &lt;pluginRepositories&gt;...&lt;/pluginRepositories&gt;</div><div class="line"> &lt;distributionManagement&gt;...&lt;/distributionManagement&gt;</div><div class="line"> &lt;profiles&gt;...&lt;/profiles&gt;</div></pre></td></tr></table></figure>
<h3 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h3><h4 id="groupId-artifactId-version"><a href="#groupId-artifactId-version" class="headerlink" title="groupId/artifactId/version"></a>groupId/artifactId/version</h4><p>这三个是最基本的配置项，用于标记一个project，</p>
<ul>
<li>groupId:组织名称，如org.apache</li>
<li>artifactId:模块名</li>
<li>version:版本号<h4 id="packaging"><a href="#packaging" class="headerlink" title="packaging"></a>packaging</h4>项目类型，表示最终会输出什么。可以是：jar、war、rar、ear、pom；默认是jar。<h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h4>包含子项目<h4 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h4>父项目<h4 id="dependency"><a href="#dependency" class="headerlink" title="dependency"></a>dependency</h4>在dependencies下<br>除groupId/artifactId/version之外还可以有以下配置：</li>
<li><type></type></li>
<li><optional></optional>:true/false:设置依赖是否可选</li>
<li><exclusions>  :排除依赖<br>  <exclusion><br>  </exclusion><br></exclusions></li>
<li><scope>…</scope>表示当前依赖范围控制：<br><strong><strong>compile （编译范围）</strong></strong><br>compile是默认的范围；如果没有提供一个范围，那该依赖的范围就是编译范围。编译范围依赖在所有的classpath 中可用，同时它们也会被打包。<br><strong><strong>provided （已提供范围）</strong></strong><br>provided 依赖只有在当JDK 或者一个容器已提供该依赖之后才使用。例如， 如果你开发了一个web 应用，你可能在编译 classpath 中需要可用的Servlet API 来编译一个servlet，但是你不会想要在打包好的WAR 中包含这个Servlet API；这个Servlet API JAR 由你的应用服务器或者servlet 容器提供。已提供范围的依赖在编译classpath （不是运行时）可用。它们不是传递性的，也不会被打包。<br><strong><strong>runtime （运行时范围）</strong></strong><br>runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如，你可能在编译的时候只需要JDBC API JAR，而只有在运行的时候才需要JDBC<br>驱动实现。<br><strong><strong>test （测试范围）</strong></strong><br>test范围依赖 在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。<br><strong><strong>system （系统范围）</strong></strong><br>system范围依赖与provided 类似，但是你必须显式的提供一个对于本地系统中JAR 文件的路径。这么做是为了允许基于本地对象编译，而这些对象是系统类库的一部分。这样的构件应该是一直可用的，Maven 也不会在仓库中去寻找它。如果你将一个依赖范围设置成系统范围，你必须同时提供一个 systemPath 元素。注意该范围是不推荐使用的（你应该一直尽量去从公共或定制的 Maven 仓库中引用依赖）。<br><strong><strong>import （导入的范围）</strong></strong><br>他只用在dependencyManagement中，表示从其他的pom中导入dependency的配置<h4 id="dependencyManagement"><a href="#dependencyManagement" class="headerlink" title="dependencyManagement"></a>dependencyManagement</h4>dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom;另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</li>
</ul>
<h3 id="Build设置"><a href="#Build设置" class="headerlink" title="Build设置"></a>Build设置</h3><h4 id="plugins-plugin"><a href="#plugins-plugin" class="headerlink" title="plugins/plugin"></a>plugins/plugin</h4><h3 id="Project信息"><a href="#Project信息" class="headerlink" title="Project信息"></a>Project信息</h3><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><p>项目描述名</p>
<h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><p>项目地址</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h3 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h3><p>几种情况：</p>
<ul>
<li>短路径优先</li>
<li>路径长度相同，则先声明先优先</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文只列出自己理解的pom文件中常用的一些标签的含义，Maven的内部运行原理可以参考这篇文章：&lt;a href=&quot;http://www.jianshu.com/p/0fb5e3fb704d&quot;&gt;&lt;strong&gt;&lt;strong&gt;maven内部运行原理解析(一)&lt;/strong&gt;&lt;/strong&gt;&lt;/a&gt;。&lt;br&gt;根据Mavan官网的&lt;a href=&quot;http://maven.apache.org/pom.html#Quick_Overview&quot;&gt;POM Reference&lt;/a&gt;,Pom文件基本上可以有以下这些元素：&lt;/p&gt;
    
    </summary>
    
      <category term="Maven" scheme="https://chblackdog.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://chblackdog.github.io/tags/Maven/"/>
    
      <category term="Pom" scheme="https://chblackdog.github.io/tags/Pom/"/>
    
  </entry>
  
  <entry>
    <title>Mac下获取并编译Android M源码</title>
    <link href="https://chblackdog.github.io/2017/03/14/android-source-complie/"/>
    <id>https://chblackdog.github.io/2017/03/14/android-source-complie/</id>
    <published>2017-03-14T01:40:12.000Z</published>
    <updated>2017-05-17T03:20:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>   开始撸Framework层，可以直接下载Framework源码，项目地址：<a href="https://github.com/android/platform_frameworks_base" target="_blank" rel="external">https://github.com/android/platform_frameworks_base</a>，但是这样下载的代码不能运行，也不能调试。所以我选择首先直接获取并编译Android源码。我选择Android6.0</p>
<a id="more"></a>
<h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>对于Android 6.0（Marshmallow）来说，需要：</p>
<ul>
<li>Mac OS v10.10(Yosemite)之后的系统带Xcode Command Line Tools</li>
<li>jdk <a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u71-oth-JPR" target="_blank" rel="external">Mac OS - jdk-7u71-macosx-x64.dmg</a></li>
<li>Python 2.6-2.7</li>
<li>GNU Make 3.81-3.82</li>
<li>Git 1.7之后<br>对于其他版本的Android源码或系统，要求可以看这里：<a href="http://source.android.com/source/requirements.html" target="_blank" rel="external">http://source.android.com/source/requirements.html</a><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><h4 id="创建大小写敏感的磁盘映像"><a href="#创建大小写敏感的磁盘映像" class="headerlink" title="创建大小写敏感的磁盘映像"></a>创建大小写敏感的磁盘映像</h4>可以用磁盘工具来新建，也可以直接用命令行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hdiutil create -type SPARSE -fs &apos;Case-sensitive Journaled HFS+&apos; -size 70g ~/android.dmg</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面创建了一个大小写敏感的OS磁盘映像，大小是70G。位置在我们的主目录下，文件名是android.dmg,我这里系统加了后缀变成了android.dmg.sparseimage。如果觉得不够，可以用下面的语句改变磁盘大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># hdiutil resize -size &lt;new-size-you-want&gt;g ~/android.dmg.sparseimage</div></pre></td></tr></table></figure></p>
<p>可以在.bash_profile文件中加入下面两句，来帮助我们快速挂载/卸载磁盘映像(改完不要忘了<code>source .bash_profile</code>)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mount the android file image</div><div class="line">function mountAndroid &#123; hdiutil attach ~/android.dmg.sparseimage -mountpoint /Volumes/android; &#125;</div><div class="line"># unmount the android file image</div><div class="line">function umountAndroid() &#123; hdiutil detach /Volumes/android; &#125;</div></pre></td></tr></table></figure></p>
<p>我们只要在命令行里打mountAndroid就可以顺利挂载磁盘了</p>
<h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u71-oth-JPR" target="_blank" rel="external">Mac OS - jdk-7u71-macosx-x64.dmg</a></p>
<h4 id="必须安装的包"><a href="#必须安装的包" class="headerlink" title="必须安装的包"></a>必须安装的包</h4><ol>
<li><p>安装Xcode command line tools</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ xcode-select --install</div></pre></td></tr></table></figure>
</li>
<li><p>安装MacPorts<br>地址：<a href="https://www.macports.org/install.php" target="_blank" rel="external">https://www.macports.org/install.php</a>安装完成后确保bash_profile文件中的path中出现参数/opt/local/bin且它必须在/usr/bin之前，如果没有，就自己添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=/opt/local/bin:$PATH</div></pre></td></tr></table></figure>
</li>
<li><p>从MacProts中安装make，git和GPG等包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ POSIXLY_CORRECT=1 sudo port install gmake libsdl git gnupg</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="设置文件描述符限制"><a href="#设置文件描述符限制" class="headerlink" title="设置文件描述符限制"></a>设置文件描述符限制</h4><p>   Mac OS系统中，默认同时打开的文件数量太少了，我们需要设置下。在bash_profile文件中加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># set the number of open files to be 1024</div><div class="line">ulimit -S -n 1024</div></pre></td></tr></table></figure></p>
<p>环境设置完成，接下来去下载源码</p>
<h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>   Android源码托管在Git上，它有很多分支/版本，我们只需要下载我们需要的版本6.0，为此我们需要借助一个工具：Repo。Repo是谷歌用Python脚本写的调用git的一个脚本。主要是用来下载、管理Android项目的软件仓库。</p>
<h4 id="安装Repo"><a href="#安装Repo" class="headerlink" title="安装Repo"></a>安装Repo</h4><ol>
<li><p>首先确保主目录下存在bin文件夹，没有的话新建一个，然后把它加入到PATH</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir ~/bin</div><div class="line">$ PATH=~/bin:$PATH</div></pre></td></tr></table></figure>
</li>
<li><p>下载Repo并设为可执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</div><div class="line">$ chmod a+x ~/bin/repo</div></pre></td></tr></table></figure>
</li>
<li><p>关于Repo的理解看这篇：<a href="http://blog.csdn.net/wzy_1988/article/details/39473481" target="_blank" rel="external">Android源码仓库和Repo工具使用</a></p>
<h4 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h4><p>由于大家都懂的原因，如果按照google的教程来下载源码，基本上是不会成功的，这里利用用清华大学的镜像源（<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="external">https://mirrors.tuna.tsinghua.edu.cn/</a>）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-6.0.1_r1</div></pre></td></tr></table></figure>
</li>
</ol>
<p>会多出来一个.repo文件夹，这样我们有了android-6.0.1_r1的manifest库，接下来就是下载源码了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ repo sync -j4 #-j表示下载的线程数，不宜过多</div></pre></td></tr></table></figure></p>
<p>时间比较长，可以休息下，中间可能会断掉，可以利用脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">PATH=~/bin:$PATH</div><div class="line">repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-6.0.1_r1</div><div class="line">repo sync -j4</div><div class="line">while [ $? = 1 ]; do</div><div class="line">    echo &quot;================sync failed, re-sync again =====&quot;</div><div class="line">    sleep 3</div><div class="line">    repo sync -j4</div><div class="line">done</div></pre></td></tr></table></figure></p>
<p>完成后我们就得到了源码，可以准备编译了，我因为磁盘空间不足，删掉了.repo文件夹。这样以后不能同步代码了，但是学习应该没什么关系</p>
<h3 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><p>   从这里开始的操作必须在android.dmg.sparsefile中，把源码文件夹mv至/Volumes/android目录下比如：/Volumes/android/aosp</p>
<h4 id="设置jdk"><a href="#设置jdk" class="headerlink" title="设置jdk"></a>设置jdk</h4><p>之前已经安装了jdk-7u71-macosx-x64.dmg，如果有其他版本的jdk的话可以这样设置.bash_profile文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">export JAVA_6_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</div><div class="line">export JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_71.jdk/Contents/Home</div><div class="line">export JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_73.jdk/Contents/Home</div><div class="line"></div><div class="line">export JAVA_HOME=$JAVA_8_HOME</div><div class="line">alias jdk8=&apos;export JAVA_HOME=$JAVA_8_HOME&apos;</div><div class="line">alias jdk7=&apos;export JAVA_HOME=$JAVA_7_HOME&apos;</div><div class="line">alias jdk6=&apos;export JAVA_HOME=$JAVA_6_HOME&apos;</div></pre></td></tr></table></figure></p>
<p>默认jdk是1.8，只要在终端输入jdk7，就切换成1.7了，很方便</p>
<h4 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h4><p>如果要做驱动开发的话还需要下载对应手机型号的底层驱动，我们只看framework层代码，所以就不需要去下载了</p>
<ol>
<li><p>环境准备<br>终端输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source build/envsetup.sh</div></pre></td></tr></table></figure>
</li>
<li><p>选择要编译成哪个平台的，可以连接上手机后用下面的命令查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ adb shell cat /proc/cpuinfo</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后选择对应的平台，我这里选择arm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lunch aosp_arm-eng</div></pre></td></tr></table></figure></p>
<ol>
<li><p>开始编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make -j4</div></pre></td></tr></table></figure>
</li>
<li><p>可能错误</p>
</li>
</ol>
<ul>
<li>lunch错误：Can not find SDK 10.6 at /Developer/SDKs/MacOSX10.6.sdk<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">build/core/combo/mac_version.mk:38: *****************************************************</div><div class="line">build/core/combo/mac_version.mk:39: * Can not find SDK 10.6 at /Developer/SDKs/MacOSX10.6.sdk</div><div class="line">build/core/combo/mac_version.mk:40: *****************************************************</div></pre></td></tr></table></figure>
</li>
</ul>
<p>看了下build/core/combo/mac_version.mk，发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mac_sdk_versions_supported :=  10.6 10.7 10.8 10.9</div></pre></td></tr></table></figure></p>
<p>而我的版本是10.12，它不支持，本以为只要在它后面加上自己的版本就可以了，结果发现此版本少一个syscall，需要它之前的版本，所以我们需要下载老版本的的SDK，这里下载<a href="https://github.com/phracker/MacOSX-SDKs" target="_blank" rel="external">https://github.com/phracker/MacOSX-SDKs</a>,然后放到一个目录下，做一个软连接到/Applications/XCode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ln -s ~/Develop/MacOSX10.11.sdk /Applications/XCode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk</div></pre></td></tr></table></figure></p>
<p>最后在mac_sdk_versions_supported后添加10.11即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mac_sdk_versions_supported :=  10.6 10.7 10.8 10.9 10.11</div></pre></td></tr></table></figure></p>
<p>sdk版本可以用下面的命令查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ xcodebuild -showsdks | grep macosx | sort | sed -e &quot;s/.*macosx//g&quot;</div></pre></td></tr></table></figure></p>
<p>可以用svn来单独checkout github上的某个特定的文件夹:将地址<a href="https://github.com/phracker/MacOSX-SDKs/tree/master/MacOSX10.11.sdk，改成https://github.com/phracker/MacOSX-SDKs/thunk/MacOSX10.11.sdk即可" target="_blank" rel="external">https://github.com/phracker/MacOSX-SDKs/tree/master/MacOSX10.11.sdk，改成https://github.com/phracker/MacOSX-SDKs/thunk/MacOSX10.11.sdk即可</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn checkout https://github.com/phracker/MacOSX-SDKs/thunk/MacOSX10.11.sdk</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>编译出错：error: ‘syscall’ is deprecated<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">system/core/libcutils/threads.c:38:10: error: &apos;syscall&apos; is deprecated: first deprecated in OS X 10.12 - syscall(2) is unsupported; please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost(). [-Werror,-Wdeprecated-declarations]</div><div class="line">  return syscall(SYS_thread_selfid);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这是SDK10.12引起的，这个版本的SDK没有syscall，解决办法：利用SDK10.11，看前面</p>
<hr>
<ul>
<li>编译出错：<strong>fatal error:</strong> linux/netfilter/xt_DSCP.h: No such file or directory<br>external/iptables/extensions/../include/linux/netfilter中创建文件xt_DSCP.h<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/* based on ipt_FTOS.c (C) 2000 by Matthew G. Marsh &lt;mgm@paktronix.com&gt;</div><div class="line"> * This software is distributed under GNU GPL v2, 1991</div><div class="line"> *</div><div class="line"> * See RFC2474 for a description of the DSCP field within the IP Header.</div><div class="line"> *</div><div class="line"> * xt_DSCP.h,v 1.7 2002/03/14 12:03:13 laforge Exp</div><div class="line"> */</div><div class="line">#ifndef _XT_DSCP_TARGET_H</div><div class="line">#define _XT_DSCP_TARGET_H</div><div class="line">#include &lt;linux/netfilter/xt_dscp.h&gt;</div><div class="line">#include &lt;linux/types.h&gt;</div><div class="line"></div><div class="line">/* target info */</div><div class="line">struct xt_DSCP_info &#123;</div><div class="line">        __u8 dscp;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct xt_tos_target_info &#123;</div><div class="line">        __u8 tos_value;</div><div class="line">        __u8 tos_mask;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">#endif /* _XT_DSCP_TARGET_H */</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="源码导入Android-Studio"><a href="#源码导入Android-Studio" class="headerlink" title="源码导入Android Studio"></a>源码导入Android Studio</h3><p>待补充</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   开始撸Framework层，可以直接下载Framework源码，项目地址：&lt;a href=&quot;https://github.com/android/platform_frameworks_base&quot;&gt;https://github.com/android/platform_frameworks_base&lt;/a&gt;，但是这样下载的代码不能运行，也不能调试。所以我选择首先直接获取并编译Android源码。我选择Android6.0&lt;/p&gt;
    
    </summary>
    
      <category term="Android源码" scheme="https://chblackdog.github.io/categories/Android%E6%BA%90%E7%A0%81/"/>
    
      <category term="Android Framework" scheme="https://chblackdog.github.io/categories/Android%E6%BA%90%E7%A0%81/Android-Framework/"/>
    
    
      <category term="Android源码" scheme="https://chblackdog.github.io/tags/Android%E6%BA%90%E7%A0%81/"/>
    
      <category term="Framework" scheme="https://chblackdog.github.io/tags/Framework/"/>
    
      <category term="AOSP" scheme="https://chblackdog.github.io/tags/AOSP/"/>
    
      <category term="Android 6.0" scheme="https://chblackdog.github.io/tags/Android-6-0/"/>
    
  </entry>
  
  <entry>
    <title>Android Framework总览</title>
    <link href="https://chblackdog.github.io/2017/03/07/framework-overview/"/>
    <id>https://chblackdog.github.io/2017/03/07/framework-overview/</id>
    <published>2017-03-07T07:31:32.000Z</published>
    <updated>2017-05-17T03:19:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android系统架构"><a href="#Android系统架构" class="headerlink" title="Android系统架构"></a>Android系统架构</h3><p>   首先是一张Google提供的系统架构图，可以看到它把Android分为了四层：Android Applications,Application Framework,Dalvik Virtual Machine&amp;Libraries,Linux Kernel</p>
<a id="more"></a>
<p>   <img src="/2017/03/07/framework-overview/" alt=""></p>
<h4 id="应用程序层"><a href="#应用程序层" class="headerlink" title="应用程序层"></a>应用程序层</h4><p>   即系统自带的或者是开发者开发的手机应用，比如：SMS短信客户端程序、电话拨号程序、Web浏览器等应用程序</p>
<h4 id="应用程序框架层"><a href="#应用程序框架层" class="headerlink" title="应用程序框架层"></a>应用程序框架层</h4><p>   为应用层提供各种通用的功能模块，里面涉及到用JNI调用Core Lib层的本地方法。<em>JNI库是Dalvik虚拟机启动时加载进去的，Dalvik会直接去寻址这个JNI方法，然后去调用</em></p>
<ul>
<li>Activity Manager<br>用来管理应用程序生命周期并提供常用的导航回退功能。 </li>
<li>Window Manager<br>提供一些我们访问手机屏幕的方法。屏幕的透明度、亮度、背景。 </li>
<li>Content Providers<br>使得应用程序可以访问另一个应用程序的数据（如联系人数据库)， 或者共享它们自己的数据。 </li>
<li>View System<br>可以用来构建应用程序， 它包括列表（Lists)，网格（Grids)，文本框（Text boxes)，按钮（Buttons)， 甚至可嵌入的web浏览器。 </li>
<li>Notification Manager<br>使得应用程序可以在状态栏中显示自定义的提示信息。 </li>
<li>Package Manager<br>提供对系统的安装包的访问。包括安装、卸载应用，查询permission相关信息，查询Application相关信息等。 </li>
<li>Telephony Manager<br>主要提供了一系列用于访问与手机通讯相关的状态和信息的方法，查询电信网络状态信息，sim卡的信息等。</li>
<li>Resource Manager<br>提供非代码资源的访问，如本地字符串，图形，和布局文件（Layout files )。 </li>
<li>Location Manager<br>提供设备的地址位置的获取方式。很显然，GPS导航肯定能用到位置服务。 </li>
<li>XMPP<br>可扩展通讯和表示协议。前身为Jabber，提供即时通信服务。例如推送功能,Google Talk。 <h4 id="系统运行层库"><a href="#系统运行层库" class="headerlink" title="系统运行层库"></a>系统运行层库</h4> 分为两个部分：系统库和Android Runtime<h5 id="系统库"><a href="#系统库" class="headerlink" title="系统库"></a>系统库</h5> 系统库是应用程序框架的支撑，是连接应用程序框架层与Linux内核层的重要纽带。其主要分为如下几个：</li>
<li>Surface Manager：执行多个应用程序时候，负责管理显示与存取操作间的互动，另外也负责2D绘图与3D绘图进行显示合成。</li>
<li>Media Framework：多媒体库，基于PacketVideo OpenCore;支持多种常用的音频、视频格式录制和回放，编码格式包括MPEG4、MP3、H.264、AAC、ARM。</li>
<li>SQLite：小型的关系型数据库引擎</li>
<li>OpenGL|ES：根据OpenGL ES 1.0API标准实现的3D绘图函数库</li>
<li>FreeType：提供点阵字与向量字的描绘与显示</li>
<li>WebKit：一套网页浏览器的软件引擎</li>
<li>SGL：底层的2D图形渲染引擎</li>
<li>SSL：在Andorid上通信过程中实现握手</li>
<li>Libc：从BSD继承来的标准C系统函数库，专门为基于embedded linux的设备定制<h5 id="Android-Runtime"><a href="#Android-Runtime" class="headerlink" title="Android Runtime"></a>Android Runtime</h5> Android应用程序是采用Java语言编写，程序在Android运行时中执行，其运行时分为核心库和Dalvik虚拟机两部分。<br>核心库<br> 核心库提供了Java语言API中的大多数功能，同时也包含了Android的一些核心API，如android.os、android.NET、android.media等等。<br>Dalvik虚拟机<br> Android程序不同于J2me程序，每个Android应用程序都有一个专有的进程，并且不是多个程序运行在一个虚拟机中，而是每个Android程序都有一个Dalivik虚拟机的实例，并在该实例中执行。Dalvik虚拟机是一种基于寄存器的Java虚拟机，而不是传统的基于栈的虚拟机，并进行了内存资源使用的优化以及支持多个虚拟机的特点。<h4 id="Linux内核层"><a href="#Linux内核层" class="headerlink" title="Linux内核层"></a>Linux内核层</h4> Android手机是基于Linux内核的，其核心系统服务如安全性、内存管理、进程管理、网路协议以及驱动模型都依赖于Linux内核。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android系统架构&quot;&gt;&lt;a href=&quot;#Android系统架构&quot; class=&quot;headerlink&quot; title=&quot;Android系统架构&quot;&gt;&lt;/a&gt;Android系统架构&lt;/h3&gt;&lt;p&gt;   首先是一张Google提供的系统架构图，可以看到它把Android分为了四层：Android Applications,Application Framework,Dalvik Virtual Machine&amp;amp;Libraries,Linux Kernel&lt;/p&gt;
    
    </summary>
    
      <category term="Android源码" scheme="https://chblackdog.github.io/categories/Android%E6%BA%90%E7%A0%81/"/>
    
      <category term="Android Framework" scheme="https://chblackdog.github.io/categories/Android%E6%BA%90%E7%A0%81/Android-Framework/"/>
    
    
      <category term="Android源码" scheme="https://chblackdog.github.io/tags/Android%E6%BA%90%E7%A0%81/"/>
    
      <category term="Framework" scheme="https://chblackdog.github.io/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title>Activity的四种启动模式</title>
    <link href="https://chblackdog.github.io/2017/03/02/android-launchmode/"/>
    <id>https://chblackdog.github.io/2017/03/02/android-launchmode/</id>
    <published>2017-03-02T11:10:06.000Z</published>
    <updated>2017-03-02T13:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>   我们知道，当我们启动一个个的Activity的时候，系统会创建一个个Activity的实例并把它们放入任务栈中。任务栈是一种“后进先出”的栈，每按一下back键就会有一个Activity出栈，直到栈空为止，这时系统就会回收这个任务栈。目前有四种启动模式：<br>standard、singleTop、singleTask和singleInstance.</p>
<a id="more"></a>
<h3 id="四种启动模式"><a href="#四种启动模式" class="headerlink" title="四种启动模式"></a>四种启动模式</h3><h4 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h4><p>   标准模式，也是系统默认的启动模式，每次启动一个Activity都会新建一个实例，不管这个实例是否已经存在。在这种模式下，谁启动了这个Activity就运行在启动它的那个Activity的任务栈中，比如：A启动了B,A-&gt;B,则A所在的任务栈中就是AB。注意：在这种模式下不能使用非Activity类型的context去启动一个Activity（比如：ApplicationContext）,会报错.因为非Activity类型的Context并没有所谓的任务栈。一定要这个做的话可以指定启动模式为singleTask(或设置标记位FLAG_ACTIVITY_NEW_TASK)</p>
<h4 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h4><p>   栈顶复用模式.在这种模式下，如果新的Activity已经位于任务栈的栈顶，则它不会被重新建立，同时它的onNewIntent方法会被调用。但是如果这个Activity存在，但是没有位于栈顶，则它还是会重建。比如：ABCD，如果这时候再次启动D，则D不会新建，栈里还是ABCD</p>
<h4 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h4><p>   栈内复用模式。在这种模式下，只要Activity在一个栈中存在，那么此Activity都不会重建。比如：请求启动A，首先寻找是否存在A想要的任务栈，如果不存在，就重新建立一个任务栈，然后创建A的实例并放入栈中。如果存在A想要的任务栈，如果A在栈中已经存在，则系统把A上面的Activity都出栈，把A调至栈顶，如果不存在，就创建实例A并压入栈中。<br>   这里A想要的任务栈与参数TaskAffinity有关，后面再说</p>
<h4 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h4><p>   单实例模式。这是加强版的singleTask模式，这个模式的Activity只能单独地位于一个任务栈中</p>
<h3 id="TaskAffinity属性"><a href="#TaskAffinity属性" class="headerlink" title="TaskAffinity属性"></a>TaskAffinity属性</h3><p>   任务亲和性，任务相关性。这个参数标识了一个Activity所需的任务栈的名字，如果不指定，所有的Activity的TaskAffinity值都是包名。<br>   TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用。下面主要说下与allowTaskReparenting属性的配合使用：<br>   当应用A启动了应用B的一个Activity，比如Ac1时，Ac1设置了allowTaskReparenting为true，这个时候Ac1所在任务栈是属于应用A的，然后我们按Home键返回桌面，再打开应用B，这时B不会打开主Activity，而是把Ac1移到了应用B的任务栈中，从而打开了Ac1</p>
<h3 id="Activity的Flags"><a href="#Activity的Flags" class="headerlink" title="Activity的Flags"></a>Activity的Flags</h3><h4 id="FLAG-ACTIVITY-NEW-TASK"><a href="#FLAG-ACTIVITY-NEW-TASK" class="headerlink" title="FLAG_ACTIVITY_NEW_TASK"></a>FLAG_ACTIVITY_NEW_TASK</h4><p>   指定Activity启动模式为“singleTask”</p>
<h4 id="FLAG-ACTIVITY-SINGLE-TOP"><a href="#FLAG-ACTIVITY-SINGLE-TOP" class="headerlink" title="FLAG_ACTIVITY_SINGLE_TOP"></a>FLAG_ACTIVITY_SINGLE_TOP</h4><p>   指定Activity启动模式为“singleTop”</p>
<h4 id="FLAG-ACTIVITY-CLEAR-TOP"><a href="#FLAG-ACTIVITY-CLEAR-TOP" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TOP"></a>FLAG_ACTIVITY_CLEAR_TOP</h4><p>   标记一个Activity，当它启动时，在同一个任务栈中的在它上面的Activity都退栈。如果它的启动模式是standard，则它自己也会出栈，然后系统会新建一个新的Activity入栈。</p>
<h4 id="FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS"><a href="#FLAG-ACTIVITY-EXCLUDE-FROM-RECENTS" class="headerlink" title="FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS"></a>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</h4><p>   带有这个标记的Activity不会出现在历史Activity中，通常可用于登录页面</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   我们知道，当我们启动一个个的Activity的时候，系统会创建一个个Activity的实例并把它们放入任务栈中。任务栈是一种“后进先出”的栈，每按一下back键就会有一个Activity出栈，直到栈空为止，这时系统就会回收这个任务栈。目前有四种启动模式：&lt;br&gt;standard、singleTop、singleTask和singleInstance.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://chblackdog.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://chblackdog.github.io/tags/Android/"/>
    
      <category term="Activity" scheme="https://chblackdog.github.io/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Hexo问题集</title>
    <link href="https://chblackdog.github.io/2017/03/02/Hexo-error/"/>
    <id>https://chblackdog.github.io/2017/03/02/Hexo-error/</id>
    <published>2017-03-02T03:17:46.000Z</published>
    <updated>2017-03-02T03:32:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决不可见的换行符导致的hexo启动失败"><a href="#解决不可见的换行符导致的hexo启动失败" class="headerlink" title="解决不可见的换行符导致的hexo启动失败"></a>解决不可见的换行符导致的hexo启动失败</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>写blog过程中需要从ide中复制代码段，但是写完hexo一直报错：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Template render error: (unknown path)</div><div class="line">  SyntaxError: Invalid or unexpected token</div><div class="line">    at Object.<span class="keyword">exports</span>.prettifyError (/Users/chenghaibo/blog/hexo/node_modules/nunjucks/src/lib.js:<span class="number">34</span>:<span class="number">15</span>)</div><div class="line">    at new_cls.render (/Users/chenghaibo/blog/hexo/node_modules/nunjucks/src/environment.js:<span class="number">469</span>:<span class="number">27</span>)</div></pre></td></tr></table></figure>
<p>找了半天终于找到问题所在，这是由于直接从ide中把代码段复制到了textnut中，它自动在每行后面追加了一个不可见的换行符，就是这个换行符导致了上面问题的出现</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul>
<li>方法一<br>pages貌似不支持将软回车替换成硬回车，所以先使用pages将换行符替换成其他字符，比如||，然后将文本复制到word中，将||替换成^p,完成！</li>
<li>方法二<br>先将ide中的代码复制到pages中，然后再复制到textnut中，这样不会出现换行符</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;解决不可见的换行符导致的hexo启动失败&quot;&gt;&lt;a href=&quot;#解决不可见的换行符导致的hexo启动失败&quot; class=&quot;headerlink&quot; title=&quot;解决不可见的换行符导致的hexo启动失败&quot;&gt;&lt;/a&gt;解决不可见的换行符导致的hexo启动失败&lt;/h3&gt;&lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;写blog过程中需要从ide中复制代码段，但是写完hexo一直报错：&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://chblackdog.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://chblackdog.github.io/tags/Hexo/"/>
    
      <category term="Markdown" scheme="https://chblackdog.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Universal-image-loader源码解读</title>
    <link href="https://chblackdog.github.io/2017/03/02/image-loader-source/"/>
    <id>https://chblackdog.github.io/2017/03/02/image-loader-source/</id>
    <published>2017-03-02T02:48:56.000Z</published>
    <updated>2017-03-02T03:14:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android项目中经常用到了异步加载框架Universal-image-loader，有三级缓存（实际上只有两级，网络不算）：内存，文件。用了很久却不知道其原理，最近有时间来看下其执行原理到底是什么。</p>
<a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先Universal-image-loader的用法很简单，首先是配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ImageLoaderConfiguration.Builder configBuilder = <span class="keyword">new</span> ImageLoaderConfiguration.Builder(context);</div><div class="line">configBuilder.diskCacheSize(<span class="number">50</span> * <span class="number">1024</span> * <span class="number">1024</span>); <span class="comment">// 50 MiB 文件缓存大小</span></div><div class="line"><span class="comment">//或者使用ImageLoaderConfiguration.createDefault(context);使用默认配置</span></div><div class="line">ImageLoader.getInstance().init(configBuilder.build());</div></pre></td></tr></table></figure></p>
<p>然后是使用，有三种方法可以使用：</p>
<ol>
<li>displayImage</li>
<li>loadImage （只加载图片而不显示）</li>
<li>loadImageSync （异步加载）<br>不管用哪种方法，最终都使用了<br>displayImage(String uri, ImageAware imageAware, DisplayImageOptions options,ImageSize targetSize, ImageLoadingListener listener, ImageLoadingProgressListener progressListener)这个方法</li>
</ol>
<ul>
<li>ImageAware：图片容器</li>
<li>DisplayImageOptions：图片显示参数设置</li>
<li>ImageSize：图片大小</li>
<li>ImageLoadingListener：图片加载动作监听</li>
<li>ImageLoadingProgressListener：加载进度监听<h3 id="类解析"><a href="#类解析" class="headerlink" title="类解析"></a>类解析</h3>分析之前先了解一下各个类<h4 id="ImageAware"><a href="#ImageAware" class="headerlink" title="ImageAware"></a>ImageAware</h4>这是一个接口，相当于图片容器，提供了所有加载/显示图片所需要的方法(如获取容器的长宽等）。一般使用<strong>ImageViewAware</strong>，继承自<strong>ViewAware</strong>,来看下它的构造方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewAware</span><span class="params">(View view, <span class="keyword">boolean</span> checkActualViewSize)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (view == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"view must not be null"</span>);</div><div class="line">   <span class="keyword">this</span>.viewRef = <span class="keyword">new</span> WeakReference&lt;View&gt;(view);</div><div class="line">   <span class="keyword">this</span>.checkActualViewSize = checkActualViewSize;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这里<em>this.viewRef</em>维持了原View的一个弱引用,当这个View被GC回收时，会中断加载</p>
<h5 id="NonViewAware"><a href="#NonViewAware" class="headerlink" title="NonViewAware"></a>NonViewAware</h5><p>这个表示没有实际View的ImageAware，可以在loadImage的时候使用</p>
<h4 id="DisplayImageOptions"><a href="#DisplayImageOptions" class="headerlink" title="DisplayImageOptions"></a>DisplayImageOptions</h4><p>配置显示参数，可以设置加载中的图片，加载失败图片，缓存大小等</p>
<h4 id="ImageLoaderEngine"><a href="#ImageLoaderEngine" class="headerlink" title="ImageLoaderEngine"></a>ImageLoaderEngine</h4><p>通过这个类中的方法来驱动加载图片等操作</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>init()方法中只有一句话：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">engine = <span class="keyword">new</span> ImageLoaderEngine(configuration);</div></pre></td></tr></table></figure></p>
<p>看一下这个构造函数：</p>
<h5 id="ImageLoaderEngine构造方法"><a href="#ImageLoaderEngine构造方法" class="headerlink" title="ImageLoaderEngine构造方法"></a>ImageLoaderEngine构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ImageLoaderEngine(ImageLoaderConfiguration configuration) &#123;</div><div class="line">	<span class="keyword">this</span>.configuration = configuration;</div><div class="line">	</div><div class="line">	taskExecutor = configuration.taskExecutor;</div><div class="line">	taskExecutorForCachedImages = configuration.taskExecutorForCachedImages;</div><div class="line">	</div><div class="line">	taskDistributor = DefaultConfigurationFactory.createTaskDistributor();<span class="comment">//新建一个newCachedThreadPool线程池</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里初始化了3个Executor，具体什么用可以看submit()这个方法</p>
<h5 id="submit-方法"><a href="#submit-方法" class="headerlink" title="submit()方法"></a>submit()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">submit</span><span class="params">(<span class="keyword">final</span> LoadAndDisplayImageTask task)</span> </span>&#123;</div><div class="line">	taskDistributor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			File image = configuration.diskCache.get(task.getLoadingUri());</div><div class="line">			<span class="keyword">boolean</span> isImageCachedOnDisk = image != <span class="keyword">null</span> &amp;&amp; image.exists();</div><div class="line">			initExecutorsIfNeed();</div><div class="line">			<span class="keyword">if</span> (isImageCachedOnDisk) &#123;</div><div class="line">				taskExecutorForCachedImages.execute(task);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				taskExecutor.execute(task);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** Submits task to execution pool */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">submit</span><span class="params">(ProcessAndDisplayImageTask task)</span> </span>&#123;</div><div class="line">	initExecutorsIfNeed();</div><div class="line">	taskExecutorForCachedImages.execute(task);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从后面分析可以知道，缓存中存在的情况下（文件或内存）都通过这个taskExecutorForCachedImages去执行，否则交给taskExecutor去执行（网络加载，耗时间）。taskDistributor运行显示任务，或则用来分配任务？（暂时搞不明白）这个LoadAndDisplayImageTask就是最主要的加载显示图片线程，实现了runnable接口</p>
<h4 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h4><p>首先来分析这一段：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (TextUtils.isEmpty(uri)) &#123;</div><div class="line">	engine.cancelDisplayTaskFor(imageAware);</div><div class="line">	listener.onLoadingStarted(uri, imageAware.getWrappedView());</div><div class="line">	<span class="keyword">if</span> (options.shouldShowImageForEmptyUri()) &#123;</div><div class="line">		imageAware.setImageDrawable(options.getImageForEmptyUri(configuration.resources));</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		imageAware.setImageDrawable(<span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line">	listener.onLoadingComplete(uri, imageAware.getWrappedView(), <span class="keyword">null</span>);</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先判断提供的uri是否是空的，如果是空的，则如果在DisplayImageOptions中设置了imageResForEmptyUri/imageForEmptyUri,则在这里显示设置的图片<br>最重要的一段：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">Bitmap bmp = configuration.memoryCache.get(memoryCacheKey);<span class="comment">//内存缓存中获取图片</span></div><div class="line">	<span class="keyword">if</span> (bmp != <span class="keyword">null</span> &amp;&amp; !bmp.isRecycled()) &#123; <span class="comment">//内存中有缓存且缓存中的图片没有被回收</span></div><div class="line">	L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE, memoryCacheKey);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (options.shouldPostProcess()) &#123;<span class="comment">//显示之前需要先处理？交给DisplayImageOptions的postProcessor</span></div><div class="line">		ImageLoadingInfo imageLoadingInfo = <span class="keyword">new</span> ImageLoadingInfo(uri, imageAware, targetSize, memoryCacheKey,</div><div class="line">				options, listener, progressListener, engine.getLockForUri(uri));</div><div class="line">		ProcessAndDisplayImageTask displayTask = <span class="keyword">new</span> ProcessAndDisplayImageTask(engine, bmp, imageLoadingInfo,</div><div class="line">				defineHandler(options));</div><div class="line">		<span class="keyword">if</span> (options.isSyncLoading()) &#123;<span class="comment">//同步加载的话直接调用run方法，调用LoadAndDisplayImageTask.runTask方法，然后直接调用DisplayBitmapTask.run()方法，imageLoadingInfo.options.getDisplayer().display</span></div><div class="line">			displayTask.run();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			engine.submit(displayTask);<span class="comment">//异步显示的话交给engine处理，调用taskExecutorForCachedImages.execute(task);</span></div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;<span class="comment">//显示之前不需要处理</span></div><div class="line">		options.getDisplayer().display(bmp, imageAware, LoadedFrom.MEMORY_CACHE);<span class="comment">//交给显示器显示，默认直接显示</span></div><div class="line">		listener.onLoadingComplete(uri, imageAware.getWrappedView(), bmp);</div><div class="line">	&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//内存中不存在缓存</span></div><div class="line">	<span class="keyword">if</span> (options.shouldShowImageOnLoading()) &#123;<span class="comment">//显示加载中的图片</span></div><div class="line">		imageAware.setImageDrawable(options.getImageOnLoading(configuration.resources));</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.isResetViewBeforeLoading()) &#123;<span class="comment">//加载前取消前面的</span></div><div class="line">		imageAware.setImageDrawable(<span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ImageLoadingInfo imageLoadingInfo = <span class="keyword">new</span> ImageLoadingInfo(uri, imageAware, targetSize, memoryCacheKey,</div><div class="line">			options, listener, progressListener, engine.getLockForUri(uri));</div><div class="line">	LoadAndDisplayImageTask displayTask = <span class="keyword">new</span> LoadAndDisplayImageTask(engine, imageLoadingInfo,</div><div class="line">			defineHandler(options));</div><div class="line">	<span class="keyword">if</span> (options.isSyncLoading()) &#123;<span class="comment">//同步加载</span></div><div class="line">		displayTask.run();<span class="comment">//</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		engine.submit(displayTask);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里先找内存中有没有缓存在，如果有，则生成ProcessAndDisplayImageTask，如果没有，则生成LoadAndDisplayImageTask。从名字中就可以看出，LoadAndDisplayImageTask是要进行load操作的</p>
<h5 id="ProcessAndDisplayImageTask"><a href="#ProcessAndDisplayImageTask" class="headerlink" title="ProcessAndDisplayImageTask"></a>ProcessAndDisplayImageTask</h5><p>看下它的run方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	L.d(LOG_POSTPROCESS_IMAGE, imageLoadingInfo.memoryCacheKey);</div><div class="line"></div><div class="line">	BitmapProcessor processor = imageLoadingInfo.options.getPostProcessor();</div><div class="line">	Bitmap processedBitmap = processor.process(bitmap);</div><div class="line">	DisplayBitmapTask displayBitmapTask = <span class="keyword">new</span> DisplayBitmapTask(processedBitmap, imageLoadingInfo, engine,</div><div class="line">			LoadedFrom.MEMORY_CACHE);</div><div class="line">	LoadAndDisplayImageTask.runTask(displayBitmapTask, imageLoadingInfo.options.isSyncLoading(), handler, engine);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果显示前需要处理图片，可以通过设置options的postProcessor参数来处理，然后它启动了DisplayBitmapTask，里面是简单的图片加载任务</p>
<h5 id="LoadAndDisplayImageTask"><a href="#LoadAndDisplayImageTask" class="headerlink" title="LoadAndDisplayImageTask"></a>LoadAndDisplayImageTask</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (waitIfPaused()) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span> (delayIfNeed()) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">	ReentrantLock loadFromUriLock = imageLoadingInfo.loadFromUriLock;</div><div class="line">	L.d(LOG_START_DISPLAY_IMAGE_TASK, memoryCacheKey);</div><div class="line">	<span class="keyword">if</span> (loadFromUriLock.isLocked()) &#123;</div><div class="line">		L.d(LOG_WAITING_FOR_IMAGE_LOADED, memoryCacheKey);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	loadFromUriLock.lock();</div><div class="line">	Bitmap bmp;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		checkTaskNotActual();</div><div class="line"></div><div class="line">		bmp = configuration.memoryCache.get(memoryCacheKey);<span class="comment">//从内存中取</span></div><div class="line">		<span class="keyword">if</span> (bmp == <span class="keyword">null</span> </div><div class="line"> bmp.isRecycled()) &#123;<span class="comment">//内存中没有或被回收</span></div><div class="line">			bmp = tryLoadBitmap();<span class="comment">//尝试加载bitmap，先从diskCache中取，如果没有，则通过网络下载，并保存至文件中，同时更新到diskCache中</span></div><div class="line">			<span class="keyword">if</span> (bmp == <span class="keyword">null</span>) <span class="keyword">return</span>; <span class="comment">// listener callback already was fired</span></div><div class="line"></div><div class="line">			checkTaskNotActual();</div><div class="line">			checkTaskInterrupted();</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (options.shouldPreProcess()) &#123;<span class="comment">//可以在放入内存中缓存前先对图片进行处理</span></div><div class="line">				L.d(LOG_PREPROCESS_IMAGE, memoryCacheKey);</div><div class="line">				bmp = options.getPreProcessor().process(bmp);</div><div class="line">				<span class="keyword">if</span> (bmp == <span class="keyword">null</span>) &#123;</div><div class="line">					L.e(ERROR_PRE_PROCESSOR_NULL, memoryCacheKey);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (bmp != <span class="keyword">null</span> &amp;&amp; options.isCacheInMemory()) &#123;</div><div class="line">				L.d(LOG_CACHE_IMAGE_IN_MEMORY, memoryCacheKey);</div><div class="line">				configuration.memoryCache.put(memoryCacheKey, bmp);<span class="comment">//放入内存进行缓存</span></div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			loadedFrom = LoadedFrom.MEMORY_CACHE;</div><div class="line">			L.d(LOG_GET_IMAGE_FROM_MEMORY_CACHE_AFTER_WAITING, memoryCacheKey);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (bmp != <span class="keyword">null</span> &amp;&amp; options.shouldPostProcess()) &#123;</div><div class="line">			L.d(LOG_POSTPROCESS_IMAGE, memoryCacheKey);</div><div class="line">			bmp = options.getPostProcessor().process(bmp);<span class="comment">//显示图片前先对图片进行处理</span></div><div class="line">			<span class="keyword">if</span> (bmp == <span class="keyword">null</span>) &#123;</div><div class="line">				L.e(ERROR_POST_PROCESSOR_NULL, memoryCacheKey);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		checkTaskNotActual();</div><div class="line">		checkTaskInterrupted();</div><div class="line">	&#125; <span class="keyword">catch</span> (TaskCancelledException e) &#123;</div><div class="line">		fireCancelEvent();</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		loadFromUriLock.unlock();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	DisplayBitmapTask displayBitmapTask = <span class="keyword">new</span> DisplayBitmapTask(bmp, imageLoadingInfo, engine, loadedFrom);</div><div class="line">	runTask(displayBitmapTask, syncLoading, handler, engine);<span class="comment">//运行显示任务&#125;</span></div></pre></td></tr></table></figure>
<p>首先还是从内存中取缓存，没有再通过tryLoadBitmap()方法，先尝试从文件缓存diskCache中取，如果还没有，就从网上下载，然后保存至文件Cache（configuration.diskCache.save方法）。这里可以通过options.getPreProcessor().process(bmp)在图片缓存至内存前先对图片进行处理，然后缓存至内存中，最后还是DisplayBitmapTask</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android项目中经常用到了异步加载框架Universal-image-loader，有三级缓存（实际上只有两级，网络不算）：内存，文件。用了很久却不知道其原理，最近有时间来看下其执行原理到底是什么。&lt;/p&gt;
    
    </summary>
    
      <category term="Android源码" scheme="https://chblackdog.github.io/categories/Android%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Android" scheme="https://chblackdog.github.io/tags/Android/"/>
    
      <category term="Universal-image-loader" scheme="https://chblackdog.github.io/tags/Universal-image-loader/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio中利用JUnit进行单元测试</title>
    <link href="https://chblackdog.github.io/2017/03/02/Android-Studio-JUnit/"/>
    <id>https://chblackdog.github.io/2017/03/02/Android-Studio-JUnit/</id>
    <published>2017-03-02T02:13:00.000Z</published>
    <updated>2017-03-02T02:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>在安卓开发过程中很多时候都需要进行测试，我们可以直接在当前工程中引入JUnit进行单元的测试。在Android Studio上使用时需要进行一些简单的配置</p>
<a id="more"></a>
<h3 id="加入JUnit依赖"><a href="#加入JUnit依赖" class="headerlink" title="加入JUnit依赖"></a>加入JUnit依赖</h3><p>在app/build.gradle加入以下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建test文件夹"><a href="#创建test文件夹" class="headerlink" title="创建test文件夹"></a>创建test文件夹</h3><p>一般情况下当我们新建一个项目的时候，Android Studio会自动帮我们创建test文件夹，<strong>app/src/test</strong>。如果没有我们就要自己新建一个test目录，步骤如下：<br>    1    项目试图切换到project<br>    2    右键src-&gt;New-&gt;Directory,文件名是test<br>    3    右键新建的test文件夹，New-&gt;Folder-&gt;Java Folder勾选Change Folder Location,并在下面的地址栏中填入src/test/java<br><img src="/2017/03/02/Android-Studio-JUnit/" alt=""></p>
<h3 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h3><p>现在我们可以在src/test/java下面建测试类进行单元<br><img src="/2017/03/02/Android-Studio-JUnit/" alt=""><br>参考文档：<br>可以科学上网的可以看这篇原文：<a href="http://www.vogella.com/tutorials/AndroidTesting/article.html" target="_blank" rel="external">Unit and UI Testing in Android Studio</a><br>翻译可以看这篇：<a href="http://www.jianshu.com/p/03118c11c199" target="_blank" rel="external">在Android Studio中进行单元测试和UI测试</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在安卓开发过程中很多时候都需要进行测试，我们可以直接在当前工程中引入JUnit进行单元的测试。在Android Studio上使用时需要进行一些简单的配置&lt;/p&gt;
    
    </summary>
    
      <category term="Android Studio" scheme="https://chblackdog.github.io/categories/Android-Studio/"/>
    
    
      <category term="Android Studio" scheme="https://chblackdog.github.io/tags/Android-Studio/"/>
    
      <category term="JUnit" scheme="https://chblackdog.github.io/tags/JUnit/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="https://chblackdog.github.io/2017/03/02/hexo-help/"/>
    <id>https://chblackdog.github.io/2017/03/02/hexo-help/</id>
    <published>2017-03-02T02:02:43.000Z</published>
    <updated>2017-03-02T02:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="按照layout模版自动生成文档"><a href="#按照layout模版自动生成文档" class="headerlink" title="按照layout模版自动生成文档"></a>按照layout模版自动生成文档</h3><p>其中layout是scaffolds文件夹中自己定义的模版文件,可在_config.yml配置生成的文件全名格式（new_post_name属性）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> [layout] &lt;title&gt;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><p>启动后可以通过<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>访问生成的网页<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<h3 id="部署到git"><a href="#部署到git" class="headerlink" title="部署到git"></a>部署到git</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div><div class="line">＃或者:</div><div class="line">hexo d -g ＃使用这个命令会在deploy之前generate</div></pre></td></tr></table></figure>
<h3 id="使用hexo-asset-image在文章中插入图片"><a href="#使用hexo-asset-image在文章中插入图片" class="headerlink" title="使用hexo-asset-image在文章中插入图片"></a>使用hexo-asset-image在文章中插入图片</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>首先修改_config.yml,设置<em>post_asset_folder:true</em>，然后安装<em>hexo-asset-image</em>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-asset-image --save</div></pre></td></tr></table></figure></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在_post文件夹下新建一个跟对应的文章名字相同的文件夹如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- <span class="number">2017</span>-<span class="number">01</span>-<span class="number">01</span>-title.md</div><div class="line">- <span class="number">2017</span>-<span class="number">01</span>-<span class="number">01</span>-title/</div><div class="line">	- img1.jpg</div><div class="line">  	- img2.jpg</div></pre></td></tr></table></figure></p>
<p>使用的时候直接使用<code>![](img1.jpg)</code>就可以插入图片了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;按照layout模版自动生成文档&quot;&gt;&lt;a href=&quot;#按照layout模版自动生成文档&quot; class=&quot;headerlink&quot; title=&quot;按照layout模版自动生成文档&quot;&gt;&lt;/a&gt;按照layout模版自动生成文档&lt;/h3&gt;&lt;p&gt;其中layout是scaffolds文件夹中自己定义的模版文件,可在_config.yml配置生成的文件全名格式（new_post_name属性）&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; [layout] &amp;lt;title&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://chblackdog.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://chblackdog.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chblackdog.github.io/2017/02/28/hello-world/"/>
    <id>https://chblackdog.github.io/2017/02/28/hello-world/</id>
    <published>2017-02-28T05:13:16.000Z</published>
    <updated>2017-03-02T02:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
